 package com.breakbooking.service;




import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.util.Map;

import java.util.Optional;

import javax.persistence.EntityExistsException;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;

import static org.mockito.BDDMockito.given;
import org.mockito.junit.jupiter.MockitoExtension;

import com.breakbooking.exception.DuplicateResourceException;
import com.breakbooking.exception.InvalidDateException;
import com.breakbooking.exception.ResourceNotFoundException;
import com.breakbooking.model.Customer;
import com.breakbooking.repo.CustomerRepo;


/* USING MOCKITO AND ASSERTJ */
/* JUnit 5 */

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

	@Mock
	private CustomerRepo customerRepo;
	//private AutoCloseable autoCloseable;
	private CustomerService underTest;
	
	
	@BeforeEach
	void setUp() throws Exception {
	//	autoCloseable= MockitoAnnotations.openMocks(this);

		underTest = new CustomerService(customerRepo);
		
	}

	@AfterEach
	void tearDown() throws Exception {
		//autoCloseable.close();
	}


	@Test
	@DisplayName("Test should Pass when find all customers ")
	void findAllCustomersSuccess() {
	//Given
	
				
	//when
		
		underTest.findAllCustomers();
		
	//then
		
		verify(customerRepo).findAll();
	}

	@Test
	@DisplayName("Test should Pass when find customer by id and customer id exists")
	void findCustomerByIdSuccess() {
	
		//Given
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetalishine@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
		
		 given(customerRepo.findById(customer.getId())).willReturn(Optional.of(customer));
		
		 //When

		Customer expected=underTest.findCustomerById(customer.getId());
		
		//Then
		
		assertThat(expected).isEqualTo(customer);
		
	

	}
	
	@Test
	@DisplayName("Test should Pass when find customer id does not exist and throw ThrowResourceNotFoundException")
	void findCustomerByIdWillThrowResourceNotFoundException() {
	
		//Given
		Long id=42L;
		 given(customerRepo.findById(id)).willReturn(Optional.empty());
		
		 //When

		
		//Then
		
	   assertThatThrownBy(()->underTest.findCustomerById(id))
	   					.isInstanceOf(ResourceNotFoundException.class)
	   					.hasMessageContaining("Customer by id "+ id +" was not found");


	}

	@Test
	@DisplayName("Test should Pass when Add customer")
	void addCustomerSuccess() {
		
		//Given
		
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetalishine@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
		//When 
		
		underTest.addCustomer(customer);
		
		//Then
		
		ArgumentCaptor<Customer> customerArugumentCaptor= 
				ArgumentCaptor.forClass(Customer.class);
		
		verify(customerRepo).save(customerArugumentCaptor.capture());
		
		Customer capturedCustomer = customerArugumentCaptor.getValue();
		
		assertThat(capturedCustomer).isEqualTo(customer);
		
	}

	@Test
	
	void addCustomerWillThrowEntityExistsException() {
		//Given
		
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetalishine@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
	
		given(customerRepo.existsById(customer.getId()))
			.willReturn(true);
			
		//When 
		
		//Then
		assertThatThrownBy(()->underTest.addCustomer(customer))
				.isInstanceOf(EntityExistsException.class)
				.hasMessageContaining("There is an existing customer with id "+customer.getId()+" in the database ");
		
		verify(customerRepo,never()).save(any());
	}
	
	@Test
	void addCustomerWillThrowDuplicateResourceException() {
		//Given
		
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetalishine@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
		given(customerRepo.selectExistsEmail(customer.getEmail()))
			.willReturn(true);
			
		//When 
		
		//Then
		assertThatThrownBy(()->underTest.addCustomer(customer))
				.isInstanceOf(DuplicateResourceException.class)
				.hasMessageContaining("Customer with email id "+customer.getEmail()+"already exists");
		
		verify(customerRepo,never()).save(any());
	}

	@Test
	void addCustomerWillThrowInvalidDateException() {
		//Given
		
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetalishine@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2022, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");


		//When 
		
		//Then
		assertThatThrownBy(()->underTest.addCustomer(customer))
				.isInstanceOf(InvalidDateException.class)
				.hasMessageContaining("Please enter a valid date of birth");
		
		verify(customerRepo, never()).save(any());
	}




	@Test
	void updateCustomerSuccess() {
		//Given
				Customer customer=new Customer(
						1L,
						"Shwetali",
						"shwetaliraut17@gmail.com",
						"Developer",
						"678345768",
						LocalDate.of(2000, 06, 06),
						"Anything",
						"AutoGeneratedCustomerCode");
			
				given(customerRepo.findById(customer.getId())).willReturn(Optional.of(customer));
				
				//When 
				
				underTest.updateCustomer(customer.getId(),customer);
				
				//Then
				
				
				
				ArgumentCaptor<Customer> customerArugumentCaptor= 
						ArgumentCaptor.forClass(Customer.class);
			
				
				verify(customerRepo).save(customerArugumentCaptor.capture());
				
				Customer capturedCustomer = customerArugumentCaptor.getValue();
			
			
				assertThat(capturedCustomer).isEqualTo(customer);
			
	
	}
	
	@Test
	void updateCustomerWillThrowResourceNotFoundException() {
		//Given
				Customer newCustomer=new Customer(
						1L,
						"Shwetali",
						"shwetaliraut17@gmail.com",
						"Developer",
						"678345768",
						LocalDate.of(2000, 06, 06),
						"Anything",
						"AutoGeneratedCustomerCode");
			
				Long id=42L;
				
				given(customerRepo.findById(id)).willReturn(Optional.empty());
				
				//When 
			   //Then
				assertThatThrownBy(()->underTest.updateCustomer(id,newCustomer))
						.isInstanceOf(ResourceNotFoundException.class)
						.hasMessageContaining("Customer with id "+id+" does not exist");
				
				verify(customerRepo,never()).save(any());
			
}
	
	
	@Test
	void updateCustomerWillThrowDuplicateResourceException() {
		//Given
		Customer oldCustomer=new Customer(
				1L,
				"Shwetali",
				"abc@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
		
		Customer newCustomer=new Customer(
					1L,
					"Shwetali",
					"shwetaliraut17@gmail.com",
					"Developer",
					"678345768",
					LocalDate.of(2000, 06, 06),
					"Anything",
					"AutoGeneratedCustomerCode");

			
				
				given(customerRepo.findById(oldCustomer.getId())).willReturn(Optional.of(oldCustomer));
				
				given(customerRepo.selectExistsEmail(newCustomer.getEmail()))
				.willReturn(true);
		
				
			   //When 
			   //Then
				assertThatThrownBy(()->underTest.updateCustomer(oldCustomer.getId(),newCustomer))
							.isInstanceOf(DuplicateResourceException.class)
							.hasMessageContaining("Customer with email id "+newCustomer.getEmail()+"already exists");
				
				verify(customerRepo,never()).save(any());
}
	
	@Test
	void updateCustomerWillThrowInvalidDateException() {
		//Given
				Customer newCustomer=new Customer(
						1L,
						"Shwetali",
						"shwetaliraut17@gmail.com",
						"Developer",
						"678345768",
						LocalDate.of(2024, 06, 06),
						"Anything",
						"AutoGeneratedCustomerCode");
			
				Long id=42L;
					
				given(customerRepo.findById(id)).willReturn(Optional.of(newCustomer));
				
				//When 
			   //Then
				assertThatThrownBy(()->underTest.updateCustomer(id,newCustomer))
						.isInstanceOf(InvalidDateException.class)
						.hasMessageContaining("Please enter a valid date of birth");
				
				verify(customerRepo,never()).save(any());
				
}
	@Test
	void deleteCustomerSuccess() {

		//Given
		Customer customer=new Customer(
				1L,
				"Shwetali",
				"shwetaliraut17@gmail.com",
				"Developer",
				"678345768",
				LocalDate.of(2000, 06, 06),
				"Anything",
				"AutoGeneratedCustomerCode");
		
		given(customerRepo.existsById(customer.getId()))
		.willReturn(true);
	
		//When
		
		Map<String, Boolean> expected = underTest.deleteCustomer(customer.getId());
		
		//Then
		verify(customerRepo).deleteById(customer.getId());
		assertThat(expected.get("Deleted")).isTrue();
	}
	
	@Test
	void deleteCustomerWillThrowResourceNotFoundException() {

		//Given
	
		Long id=42L;
		given(customerRepo.existsById(id))
		.willReturn(false);
	
		//When
		
		//Then
		assertThatThrownBy(()-> underTest.deleteCustomer(id))
							.isInstanceOf(ResourceNotFoundException.class)
							.hasMessage("Customer with id "+id+" does not exist");
		
		
		verify(customerRepo,never()).deleteById(any());
	}
}
